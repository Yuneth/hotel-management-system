/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.system.view;

import hotel.system.controller.RoomCategoryController;
import hotel.system.controller.RoomController;
import hotel.system.db.DBConnection;
import hotel.system.dto.RoomCategoryDto;
import hotel.system.dto.RoomDto;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yuneth Perera
 */
public class RoomView extends javax.swing.JFrame {

    private RoomController roomController;
    private RoomCategoryController roomCategoryController;

    /**
     * Creates new form RoomView
     */
    public RoomView() {
        try {
            roomController = new RoomController();
            roomCategoryController = new RoomCategoryController();
            initComponents();
            loadRoom();
            generateAutoRoomID();
            txtRoomId.setEditable(false);
        } catch (SQLException ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoom = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        RoomIdlbl = new javax.swing.JLabel();
        CategoryIdlbl = new javax.swing.JLabel();
        RoomNolbl = new javax.swing.JLabel();
        Availabilitylbl = new javax.swing.JLabel();
        txtRoomId = new javax.swing.JTextField();
        txtRoomNo = new javax.swing.JTextField();
        comboStatus = new javax.swing.JComboBox<>();
        comboCId = new javax.swing.JComboBox<>();
        btnclear = new javax.swing.JButton();
        RoomPricelbl = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        btnViewAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        txtSearchRoomID = new javax.swing.JTextField();
        SearchRoomlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        tblRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRoom);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Manage Room");

        btnSave.setBackground(new java.awt.Color(0, 0, 0));
        btnSave.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        RoomIdlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RoomIdlbl.setText("Room Id");

        CategoryIdlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoryIdlbl.setText("Category Id");

        RoomNolbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RoomNolbl.setText("Room No");

        Availabilitylbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Availabilitylbl.setText("Availability Status");

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable", "Booked", "Occupied", "Vacant", "Reserved", "Sold Out", "Closed", "Under Maintenance" }));

        btnclear.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnclear.setText("Reset");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        RoomPricelbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RoomPricelbl.setText("Room Amount");

        btnViewAll.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnViewAll.setText("ViewAll Rooms");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        btnSearch.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        SearchRoomlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchRoomlbl.setText("Search By Room Id:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SearchRoomlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearchRoomID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(SearchRoomlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(CategoryIdlbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(RoomIdlbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(RoomPricelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(comboCId, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(81, 81, 81)
                                                    .addComponent(RoomNolbl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(34, 34, 34)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtRoomNo)
                                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(Availabilitylbl, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(90, 90, 90))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnclear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(24, 24, 24)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RoomIdlbl)
                    .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CategoryIdlbl)
                    .addComponent(comboCId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRoomNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RoomNolbl))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Availabilitylbl)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RoomPricelbl))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnViewAll)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnclear)))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        clear();
    }//GEN-LAST:event_btnclearActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveRoom();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateRoom();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteRoom();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomMouseClicked
        searchRoom();
    }//GEN-LAST:event_tblRoomMouseClicked

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        viewAllRoom();
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchRoomId();
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RoomView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RoomView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RoomView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RoomView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RoomView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Availabilitylbl;
    private javax.swing.JLabel CategoryIdlbl;
    private javax.swing.JLabel RoomIdlbl;
    private javax.swing.JLabel RoomNolbl;
    private javax.swing.JLabel RoomPricelbl;
    private javax.swing.JLabel SearchRoomlbl;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JButton btnclear;
    private javax.swing.JComboBox<String> comboCId;
    private javax.swing.JComboBox<String> comboStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRoom;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtRoomId;
    private javax.swing.JTextField txtRoomNo;
    private javax.swing.JTextField txtSearchRoomID;
    // End of variables declaration//GEN-END:variables

    // save room
    private void saveRoom() {
        // Validate required fields
        if (txtRoomId.getText().isEmpty() || txtRoomNo.getText().isEmpty() || comboCId.getSelectedItem() == null
                || comboStatus.getSelectedItem() == null || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        // Validate if the price is a valid number
        try {
            Double.parseDouble(txtPrice.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for the price", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        RoomDto dto = new RoomDto();
        dto.setRoomId(txtRoomId.getText());
        dto.setRoomNo(txtRoomNo.getText());
        dto.setCategoryId(comboCId.getSelectedItem().toString());
        dto.setAvailabilityStatus(comboStatus.getSelectedItem().toString());
        dto.setPrice(Double.parseDouble(txtPrice.getText()));
        dto.setStatus(true); // Set status to true

        try {
            String result = roomController.saveRoom(dto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRoom();
            generateAutoRoomID();
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // update room
    private void updateRoom() {
        // Validate required fields
        if (txtRoomId.getText().isEmpty() || txtRoomNo.getText().isEmpty() || comboCId.getSelectedItem() == null
                || comboStatus.getSelectedItem() == null || txtPrice.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        // Validate if the price is a valid number
        try {
            Double.parseDouble(txtPrice.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for the price", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        RoomDto dto = new RoomDto();
        dto.setRoomId(txtRoomId.getText());
        dto.setRoomNo(txtRoomNo.getText());
        dto.setCategoryId(comboCId.getSelectedItem().toString());
        dto.setAvailabilityStatus(comboStatus.getSelectedItem().toString());
        dto.setPrice(Double.parseDouble(txtPrice.getText()));
        dto.setStatus(true); // Set status to true

        try {
            String result = roomController.updateRoom(dto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRoom();
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // delete room
    private void deleteRoom() {
        // Check if txtRoomId is empty
        if (txtRoomId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a room to delete.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this room?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String roomId = txtRoomId.getText();
                String resp = roomController.deleteRoom(roomId);
                JOptionPane.showMessageDialog(this, resp);
                loadRoom();
                clear();
            } catch (Exception ex) {
                Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    // clear form
    private void clear() {
        try {
            txtRoomId.setText("");
            txtRoomId.setEditable(false);
            txtRoomNo.setText("");
            comboCId.setSelectedItem(null);
            comboStatus.setSelectedItem(null);
            txtPrice.setText("");
            txtSearchRoomID.setText(""); 
            loadRoom();
            generateAutoRoomID();
        } catch (SQLException ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // load room
    public void loadRoom() {
        try {
            String columns[] = {"Room Id", "Room No", "Category Id", "Availability Status", " Price"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblRoom.setModel(dtm);

            List<RoomDto> roomDtos = roomController.getAllRoom();

            for (RoomDto roomDto : roomDtos) {
                if (roomDto.isStatus()) {
                    Object[] rowData = {roomDto.getRoomId(), roomDto.getRoomNo(), roomDto.getCategoryId(),
                        roomDto.getAvailabilityStatus(), roomDto.getPrice()};

                    dtm.addRow(rowData);
                }
            }

            // Load category_id values into comboCId
            getCategoryIds();

        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // search room
    private void searchRoom() {
        String id = tblRoom.getValueAt(tblRoom.getSelectedRow(), 0).toString();
        try {
            RoomDto dto = roomController.getRoom(id);

            if (dto != null) {
                //txtRoomId.setEditable(false);  // Make the text field non-editable
                txtRoomId.setText(dto.getRoomId());
                txtRoomNo.setText(dto.getRoomNo());
                comboCId.setSelectedItem(dto.getCategoryId());
                comboStatus.setSelectedItem(dto.getAvailabilityStatus());
                txtPrice.setText(String.valueOf(dto.getPrice()));

            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // viewAll Room
    public void viewAllRoom() {
        try {
            String columns[] = {"Room Id", "Room No", "Category Id", "Availability Status", " Price"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblRoom.setModel(dtm);

            List<RoomDto> roomDtos = roomController.getAllRoom();

            for (RoomDto roomDto : roomDtos) {
                Object[] rowData = {roomDto.getRoomId(), roomDto.getRoomNo(), roomDto.getCategoryId(),
                    roomDto.getAvailabilityStatus(), roomDto.getPrice()};
                dtm.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // get CategoryIds
    private void getCategoryIds() {
        try {
            List<RoomCategoryDto> roomCategoryDtos = roomCategoryController.getAllRoomCategory();

            // Clear existing items in the combo box
            comboCId.removeAllItems();

            if (roomCategoryDtos != null && !roomCategoryDtos.isEmpty()) {
                for (RoomCategoryDto roomCategoryDto : roomCategoryDtos) {
                    // Add the customer ID to the combo box only if status is true
                    if (roomCategoryDto.isStatus()) {
                        comboCId.addItem(roomCategoryDto.getCategoryId());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No Category Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // search in Room Id
    private void searchRoomId() {
        // Check if txtRoomId is empty
        if (txtSearchRoomID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a room ID to search.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        String roomId = txtSearchRoomID.getText();
        try {
            RoomDto roomDto = roomController.getRoom(roomId);
            DefaultTableModel dtm = (DefaultTableModel) tblRoom.getModel();

            // Clear existing rows in the table
            dtm.setRowCount(0);

            if (roomDto != null) {
                // Add the room data to the table
                Object[] rowData = {roomDto.getRoomId(), roomDto.getRoomNo(), roomDto.getCategoryId(),
                    roomDto.getAvailabilityStatus(), roomDto.getPrice()};
                dtm.addRow(rowData);
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // generate Auto RoomID
    private void generateAutoRoomID() throws SQLException {
        try {
            Connection connection = DBConnection.getInstance().getConnection();

            // SQL query to retrieve the last RoomID
            String query = "SELECT MAX(room_id) FROM rooms";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Get the last RoomID from the result set
                    String lastRoomId = resultSet.getString(1);

                    // Generate the next RoomID
                    String nextRoomId = generateNextRoomId(lastRoomId);

                    // Set the generated RoomID to your text field 
                    txtRoomId.setText(nextRoomId);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to generate the next RoomID based on the last RoomID
    private String generateNextRoomId(String lastRoomId) {
        if (lastRoomId == null || lastRoomId.isEmpty()) {
            return "R001";  // If no previous RoomID
        }

        int numericPart = Integer.parseInt(lastRoomId.substring(1));
        numericPart++;

        return String.format("R%03d", numericPart);
    }

}
