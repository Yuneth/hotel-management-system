/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.system.view;

import hotel.system.controller.RoomCategoryController;
import hotel.system.db.DBConnection;
import hotel.system.dto.RoomCategoryDto;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Yuneth Perera
 */
public class RoomCategoryView extends javax.swing.JFrame {

    private RoomCategoryController roomCategoryController;

    /**
     * Creates new form RoomCategoryView
     */
    public RoomCategoryView() {
        try {
            roomCategoryController = new RoomCategoryController();
            initComponents();
            loadRoomCategory();
            generateAutoCategoryID();
            txtCategoryId.setEditable(false);
        } catch (SQLException ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        roomlbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoomCategory = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        CategoryIdlbl = new javax.swing.JLabel();
        Namelbl = new javax.swing.JLabel();
        Deslbl = new javax.swing.JLabel();
        Facilitieslbl = new javax.swing.JLabel();
        txtCategoryId = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDes = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtFacilities = new javax.swing.JTextArea();
        btnClear = new javax.swing.JButton();
        btnViewAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        txtSearchCategory = new javax.swing.JTextField();
        RoomCatlbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        roomlbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        roomlbl.setText("Manage Room Category");

        tblRoomCategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRoomCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomCategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRoomCategory);

        btnSave.setBackground(new java.awt.Color(0, 0, 0));
        btnSave.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        CategoryIdlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoryIdlbl.setText("Cetegory Id");

        Namelbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Namelbl.setText("Category Type");

        Deslbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Deslbl.setText("Description");

        Facilitieslbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Facilitieslbl.setText("Facilities");

        txtDes.setColumns(20);
        txtDes.setRows(5);
        jScrollPane2.setViewportView(txtDes);

        txtFacilities.setColumns(20);
        txtFacilities.setRows(5);
        jScrollPane3.setViewportView(txtFacilities);

        btnClear.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnClear.setText("Reset");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnViewAll.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnViewAll.setText("ViewAll Room Category");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        btnSearch.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        RoomCatlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RoomCatlbl.setText("Search By Room Category Id:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RoomCatlbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(RoomCatlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(438, 438, 438)
                                .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(94, 94, 94))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(CategoryIdlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Deslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCategoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(94, 94, 94)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Namelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Facilitieslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(28, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomlbl)
                .addGap(333, 333, 333))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(roomlbl)
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Namelbl)
                            .addComponent(txtCategoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Facilitieslbl)
                                .addGap(66, 66, 66))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CategoryIdlbl)
                        .addGap(37, 37, 37)
                        .addComponent(Deslbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(46, 46, 46)
                .addComponent(btnViewAll)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveRoomCategory();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateRoomCategory();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteRoomCategory();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void tblRoomCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomCategoryMouseClicked
        searchRoomCategory();
    }//GEN-LAST:event_tblRoomCategoryMouseClicked

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        viewAllRoomCategory();
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchRoomCategoryId();
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(RoomCategoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(RoomCategoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(RoomCategoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(RoomCategoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new RoomCategoryView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CategoryIdlbl;
    private javax.swing.JLabel Deslbl;
    private javax.swing.JLabel Facilitieslbl;
    private javax.swing.JLabel Namelbl;
    private javax.swing.JLabel RoomCatlbl;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel roomlbl;
    private javax.swing.JTable tblRoomCategory;
    private javax.swing.JTextField txtCategoryId;
    private javax.swing.JTextArea txtDes;
    private javax.swing.JTextArea txtFacilities;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearchCategory;
    // End of variables declaration//GEN-END:variables

    // Save Room Category
    private void saveRoomCategory() {
        // Validate required fields
        if (txtCategoryId.getText().isEmpty() || txtName.getText().isEmpty() || txtDes.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        RoomCategoryDto dto = new RoomCategoryDto();
        dto.setCategoryId(txtCategoryId.getText());
        dto.setCategoryType(txtName.getText());
        dto.setDescription(txtDes.getText());
        dto.setFacilities(txtFacilities.getText());
        dto.setStatus(true);

        try {
            String result = roomCategoryController.saveRoomCategory(dto);
            JOptionPane.showMessageDialog(this, result);
            clear();
            loadRoomCategory();
            generateAutoCategoryID();
        } catch (Exception ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // Update Room Category
    private void updateRoomCategory() {
        // Validate required fields
        if (txtCategoryId.getText().isEmpty() || txtName.getText().isEmpty() || txtDes.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all required fields", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        try {
            RoomCategoryDto dto = new RoomCategoryDto();
            dto.setCategoryId(txtCategoryId.getText());
            dto.setCategoryType(txtName.getText());
            dto.setDescription(txtDes.getText());
            dto.setFacilities(txtFacilities.getText());
            dto.setStatus(true);

            String resp = roomCategoryController.updateRoomCategory(dto);
            JOptionPane.showMessageDialog(this, resp);
            loadRoomCategory();
            clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }

    // Delete Room Category
    private void deleteRoomCategory() {
        try {
            // Validate if categoryId is empty
            if (txtCategoryId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please select a category to delete.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return; // Stop the deletion process if validation fails
            }

            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this room category?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String categoryId = txtCategoryId.getText();
                String resp = roomCategoryController.deleteRoomCategory(categoryId);
                JOptionPane.showMessageDialog(this, resp);
                loadRoomCategory();
                clear();
            }
        } catch (Exception ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // Clear form
    private void clear() {
        try {
            txtCategoryId.setText("");
            txtCategoryId.setEditable(false);
            txtName.setText("");
            txtDes.setText("");
            txtFacilities.setText("");
            txtSearchCategory.setText("");
            loadRoomCategory();
            generateAutoCategoryID();
        } catch (SQLException ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Load Room Category
    public void loadRoomCategory() {
        try {
            String columns[] = {"Category Id", "Name", "Description", "Facilities"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblRoomCategory.setModel(dtm);

            List<RoomCategoryDto> roomCategoryDtos = roomCategoryController.getAllRoomCategory();

            for (RoomCategoryDto roomCategoryDto : roomCategoryDtos) {
                if (roomCategoryDto.isStatus()) {
                    Object[] rowData = {roomCategoryDto.getCategoryId(), roomCategoryDto.getCategoryType(), roomCategoryDto.getDescription(),
                        roomCategoryDto.getFacilities()};
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // search Room Category
    private void searchRoomCategory() {
        String id = tblRoomCategory.getValueAt(tblRoomCategory.getSelectedRow(), 0).toString();
        try {
            RoomCategoryDto dto = roomCategoryController.getRoomCategory(id);

            if (dto != null) {
                txtCategoryId.setEditable(false);  // Make the text field non-editable
                txtCategoryId.setText(dto.getCategoryId());
                txtName.setText(dto.getCategoryType());
                txtDes.setText(dto.getDescription());
                txtFacilities.setText(dto.getFacilities());

            } else {
                JOptionPane.showMessageDialog(this, "Room Category Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // viewAll RoomCategory
    public void viewAllRoomCategory() {
        try {
            String columns[] = {"Category Id", "Name", "Description", "Facilities"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblRoomCategory.setModel(dtm);

            List<RoomCategoryDto> roomCategoryDtos = roomCategoryController.getAllRoomCategory();

            for (RoomCategoryDto roomCategoryDto : roomCategoryDtos) {
                Object[] rowData = {roomCategoryDto.getCategoryId(), roomCategoryDto.getCategoryType(), roomCategoryDto.getDescription(),
                    roomCategoryDto.getFacilities()};
                dtm.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // search in RoomCategory Id
    private void searchRoomCategoryId() {
        String categoryId = txtSearchCategory.getText();

        // Validate if categoryId is empty
        if (categoryId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a category ID to search.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the search process if validation fails
        }

        try {
            RoomCategoryDto roomCategoryDto = roomCategoryController.getRoomCategory(categoryId);
            DefaultTableModel dtm = (DefaultTableModel) tblRoomCategory.getModel();

            // Clear existing rows in the table
            dtm.setRowCount(0);

            if (roomCategoryDto != null) {
                // Add the category data to the table
                Object[] rowData = {roomCategoryDto.getCategoryId(), roomCategoryDto.getCategoryType(), roomCategoryDto.getDescription(),
                    roomCategoryDto.getFacilities()};
                dtm.addRow(rowData);
            } else {
                JOptionPane.showMessageDialog(this, "Room Category Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    // generate Auto CategoryID
    private void generateAutoCategoryID() throws SQLException {
        try {
            Connection connection = DBConnection.getInstance().getConnection();

            // SQL query to retrieve the last CategoryID
            String query = "SELECT MAX(category_id) FROM room_categories";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Get the last CategoryID from the result set
                    String lastCategoryId = resultSet.getString(1);

                    // Generate the next CategoryID
                    String nextCategoryId = generateNextCategoryId(lastCategoryId);

                    // Set the generated CategoryID to your text field
                    txtCategoryId.setText(nextCategoryId);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(RoomCategoryView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to generate the next CategoryID based on the last customer ID
    private String generateNextCategoryId(String lastCategoryId) {
        if (lastCategoryId == null || lastCategoryId.isEmpty()) {
            return "RC001";  // If no previous CategoryID
        }

        int numericPart = Integer.parseInt(lastCategoryId.substring(2));
        numericPart++;

        return String.format("RC%03d", numericPart);
    }

}
