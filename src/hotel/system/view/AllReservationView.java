/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.system.view;

import hotel.system.controller.ReservationController;
import hotel.system.dto.ReservationDetailsDto;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Yuneth Perera
 */
public class AllReservationView extends javax.swing.JFrame {

    private ReservationController reservationController;
    //private ReservationDetailsDto reservationDetailsDto;

    /**
     * Creates new form AllReservationView
     */
    public AllReservationView() {
        reservationController = new ReservationController();
        initComponents();
        viewAllReservation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReservation = new javax.swing.JTable();
        btnCancelReser = new javax.swing.JButton();
        btnCurrentReser = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        Reserlbl = new javax.swing.JLabel();
        ViewReservationlbl = new javax.swing.JLabel();
        txtSearchReserId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        tblReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblReservation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblReservationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblReservation);

        btnCancelReser.setBackground(new java.awt.Color(0, 0, 0));
        btnCancelReser.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnCancelReser.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelReser.setText("View Cancel Reservation");
        btnCancelReser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReserActionPerformed(evt);
            }
        });

        btnCurrentReser.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnCurrentReser.setText("View Current Reservation");
        btnCurrentReser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCurrentReserActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        Reserlbl.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Reserlbl.setText("Reservation Id");

        ViewReservationlbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        ViewReservationlbl.setText("View Reservation");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ViewReservationlbl)
                .addGap(335, 335, 335))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Reserlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtSearchReserId, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnCurrentReser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCancelReser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(29, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ViewReservationlbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(Reserlbl)
                    .addComponent(txtSearchReserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelReser)
                    .addComponent(btnCurrentReser))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchReservationId();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCurrentReserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCurrentReserActionPerformed
        viewCurrentReservation();
    }//GEN-LAST:event_btnCurrentReserActionPerformed

    private void btnCancelReserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReserActionPerformed
        viewCancelReservation();
    }//GEN-LAST:event_btnCancelReserActionPerformed

    private void tblReservationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReservationMouseClicked
        tblRowClick();
    }//GEN-LAST:event_tblReservationMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AllReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AllReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AllReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AllReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AllReservationView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Reserlbl;
    private javax.swing.JLabel ViewReservationlbl;
    private javax.swing.JButton btnCancelReser;
    private javax.swing.JButton btnCurrentReser;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReservation;
    private javax.swing.JTextField txtSearchReserId;
    // End of variables declaration//GEN-END:variables

    // viewAll Reservation
    public void viewAllReservation() {
        try {
            String columns[] = {"ReservationId ", "RoomId", "CustomerId", "PackageId ", " ReserveDate", "CheckInDate", "CheckInTime", "CheckOutDate", "CheckOutTime", "ReserveStatus", "Amount"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };

            tblReservation.setModel(dtm);

            List<ReservationDetailsDto> reservationDetailsDtos = reservationController.getAllReservation();

            for (ReservationDetailsDto reservationDetailsDto : reservationDetailsDtos) {
                Object[] rowData = {
                    reservationDetailsDto.getReservationId(),
                    reservationDetailsDto.getRoomId(),
                    reservationDetailsDto.getCustomerId(),
                    reservationDetailsDto.getPackageId(),
                    reservationDetailsDto.getReserveDate(),
                    reservationDetailsDto.getCheckInDate(),
                    reservationDetailsDto.getCheckInTime(),
                    reservationDetailsDto.getCheckOutDate(),
                    reservationDetailsDto.getCheckOutTime(),
                    reservationDetailsDto.getReserveStatus(),
                    reservationDetailsDto.getAmount()};
                dtm.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(AllReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // view Current Reservation
    public void viewCurrentReservation() {
        try {
            String columns[] = {"ReservationId ", "RoomId", "CustomerId", "PackageId ", " ReserveDate", "CheckInDate", "CheckInTime", "CheckOutDate", "CheckOutTime", "ReserveStatus", "Amount"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            tblReservation.setModel(dtm);

            List<ReservationDetailsDto> reservationDetailsDtos = reservationController.getAllReservation();

            for (ReservationDetailsDto reservationDetailsDto : reservationDetailsDtos) {
                // Check if isStatus() is "1"
                if (reservationDetailsDto.isStatus()) {
                    Object[] rowData = {
                        reservationDetailsDto.getReservationId(),
                        reservationDetailsDto.getRoomId(),
                        reservationDetailsDto.getCustomerId(),
                        reservationDetailsDto.getPackageId(),
                        reservationDetailsDto.getReserveDate(),
                        reservationDetailsDto.getCheckInDate(),
                        reservationDetailsDto.getCheckInTime(),
                        reservationDetailsDto.getCheckOutDate(),
                        reservationDetailsDto.getCheckOutTime(),
                        reservationDetailsDto.getReserveStatus(),
                        reservationDetailsDto.getAmount()};
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(AllReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    // view Cancel Reservation
    public void viewCancelReservation() {
        try {
            String columns[] = {"ReservationId ", "RoomId", "CustomerId", "PackageId ", " ReserveDate", "CheckInDate", "CheckInTime", "CheckOutDate", "CheckOutTime", "ReserveStatus", "Amount"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            tblReservation.setModel(dtm);

            List<ReservationDetailsDto> reservationDetailsDtos = reservationController.getAllReservation();

            for (ReservationDetailsDto reservationDetailsDto : reservationDetailsDtos) {
                // Check if isStatus() is "0"
                if (!reservationDetailsDto.isStatus()) {
                    Object[] rowData = {
                        reservationDetailsDto.getReservationId(),
                        reservationDetailsDto.getRoomId(),
                        reservationDetailsDto.getCustomerId(),
                        reservationDetailsDto.getPackageId(),
                        reservationDetailsDto.getReserveDate(),
                        reservationDetailsDto.getCheckInDate(),
                        reservationDetailsDto.getCheckInTime(),
                        reservationDetailsDto.getCheckOutDate(),
                        reservationDetailsDto.getCheckOutTime(),
                        reservationDetailsDto.getReserveStatus(),
                        reservationDetailsDto.getAmount()};
                    dtm.addRow(rowData);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(AllReservationView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    //tbl Row Click
    public void tblRowClick() {
        // Get the selected row index
        int selectedRow = tblReservation.getSelectedRow();

        // Check if a valid row is selected
        if (selectedRow != -1) {
            try {
                // Retrieve data from the selected row
                String reservationId = tblReservation.getValueAt(selectedRow, 0).toString();
                String roomId = tblReservation.getValueAt(selectedRow, 1).toString();
                String customerId = tblReservation.getValueAt(selectedRow, 2).toString();
                String packageId = tblReservation.getValueAt(selectedRow, 3).toString();
                Date reserveDate = (Date) tblReservation.getValueAt(selectedRow, 4);
                Date checkInDate = (Date) tblReservation.getValueAt(selectedRow, 5);
                String checkInTime = tblReservation.getValueAt(selectedRow, 6).toString();
                Date checkOutDate = (Date) tblReservation.getValueAt(selectedRow, 7);
                String checkOutTime = tblReservation.getValueAt(selectedRow, 8).toString();
                String reserveStatus = tblReservation.getValueAt(selectedRow, 9).toString();
                Double amount = Double.parseDouble(tblReservation.getValueAt(selectedRow, 10).toString());

                // Create a ReservationDetailsDto with the selected data
                ReservationDetailsDto selectedReservationDetailsDto = new ReservationDetailsDto();
                selectedReservationDetailsDto.setReservationId(reservationId);
                selectedReservationDetailsDto.setRoomId(roomId);
                selectedReservationDetailsDto.setCustomerId(customerId);
                selectedReservationDetailsDto.setPackageId(packageId);
                selectedReservationDetailsDto.setReserveDate(reserveDate);
                selectedReservationDetailsDto.setCheckInDate(checkInDate);
                selectedReservationDetailsDto.setCheckInTime(checkInTime);
                selectedReservationDetailsDto.setCheckOutDate(checkOutDate);
                selectedReservationDetailsDto.setCheckOutTime(checkOutTime);
                selectedReservationDetailsDto.setReserveStatus(reserveStatus);
                selectedReservationDetailsDto.setAmount(amount);

//                //Open ReservationView and pass the selected data
//                ReservationView reservationView = new ReservationView(selectedReservationDetailsDto);
//                reservationView.setVisible(true);
                //Open ReservationView and pass the selected data
                ReservationUpdateView reservationCancelView = new ReservationUpdateView(selectedReservationDetailsDto);
                reservationCancelView.setVisible(true);

            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error retrieving selected row data");
            }
        }
    }

    // search in Reservation Id
    private void searchReservationId() {
        // Check if txtSearchReserId is empty
        if (txtSearchReserId.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Reservation ID to search.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return; // Stop the method execution if validation fails
        }

        String reservationId = txtSearchReserId.getText();
        try {
            ReservationDetailsDto reservationDetailsDto = reservationController.getReservation(reservationId);
            DefaultTableModel dtm = (DefaultTableModel) tblReservation.getModel();

            // Clear existing rows in the table
            dtm.setRowCount(0);

            if (reservationDetailsDto != null) {
                // Add the reservation data to the table
                Object[] rowData = {
                    reservationDetailsDto.getReservationId(),
                    reservationDetailsDto.getRoomId(),
                    reservationDetailsDto.getCustomerId(),
                    reservationDetailsDto.getPackageId(),
                    reservationDetailsDto.getReserveDate(),
                    reservationDetailsDto.getCheckInDate(),
                    reservationDetailsDto.getCheckInTime(),
                    reservationDetailsDto.getCheckOutDate(),
                    reservationDetailsDto.getCheckOutTime(),
                    reservationDetailsDto.getReserveStatus(),
                    reservationDetailsDto.getAmount()};

                dtm.addRow(rowData);
            } else {
                JOptionPane.showMessageDialog(this, "Reservation Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(AllReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

}
