/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hotel.system.view;

import hotel.system.controller.CustomerController;
import hotel.system.controller.PackageController;
import hotel.system.controller.ReservationController;
import hotel.system.controller.RoomController;
import hotel.system.dao.CrudUtil;
import hotel.system.db.DBConnection;
import hotel.system.dto.CustomerDto;
import hotel.system.dto.PackageDto;
import hotel.system.dto.ReservationDetailsDto;
import hotel.system.dto.ReservationDto;
import hotel.system.dto.RoomDto;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yuneth Perera
 */
public class ReservationView extends javax.swing.JFrame {

    private CustomerController customerController;
    private RoomController roomController;
    private PackageController packageController;
    private ReservationController reservationController;

    //private ReservationDetailsDto reservationDetailsDto;
    private List<ReservationDetailsDto> reservationDetailsDtos = new ArrayList<>();

    private Double roomAmount;
    private Double packageAmount;

    /**
     * Creates new form ReservationView
     */
    public ReservationView() {
        try {

            customerController = new CustomerController();
            roomController = new RoomController();
            packageController = new PackageController();
            reservationController = new ReservationController();
            initComponents();
            //setReservationDetails(selectedReservationDetailsDto);
            getCustomerIds(); // Load Customer_Ids values into combobox
            getRoomIds(); // Load Room_Ids values into combobox
            getPackageIds(); // Load Package_Ids values into combobox
            loadTable();
            generateAutoReserveID();
            txtResId.setEditable(false);

            comboRoomId.setSelectedItem(null);
            comboCustId.setSelectedItem(null);
            comboPackId.setSelectedItem(null);
            comboReserStatus.setSelectedItem(null);
            TotalAmountlbl.setText("");

        } catch (SQLException ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddRoom = new javax.swing.JTable();
        ResIdlbl = new javax.swing.JLabel();
        RoomIdlbl = new javax.swing.JLabel();
        CustIdlbl = new javax.swing.JLabel();
        txtResId = new javax.swing.JTextField();
        comboRoomId = new javax.swing.JComboBox<>();
        comboCustId = new javax.swing.JComboBox<>();
        CheckInlbl = new javax.swing.JLabel();
        CheckOutlbl = new javax.swing.JLabel();
        Amountlbl = new javax.swing.JLabel();
        btnAddRooom = new javax.swing.JButton();
        btnBook = new javax.swing.JButton();
        RoomDetaillbl = new javax.swing.JLabel();
        btnRoomSearch = new javax.swing.JButton();
        PackageIdlbl = new javax.swing.JLabel();
        comboPackId = new javax.swing.JComboBox<>();
        CustDetaillbl = new javax.swing.JLabel();
        PackDetaillbl = new javax.swing.JLabel();
        btnCustSearch = new javax.swing.JButton();
        btnPackSearch = new javax.swing.JButton();
        dateCheckIn = new com.toedter.calendar.JDateChooser();
        dateCheckOut = new com.toedter.calendar.JDateChooser();
        reserStatuslbl = new javax.swing.JLabel();
        comboReserStatus = new javax.swing.JComboBox<>();
        TotalAmountlbl = new javax.swing.JLabel();
        CheckInTimelbl = new javax.swing.JLabel();
        txtCheckInTime = new javax.swing.JTextField();
        CheckOutTimelbl = new javax.swing.JLabel();
        txtCheckOutTime = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(950, 449));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Manage Reservation");

        tblAddRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAddRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAddRoomMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAddRoom);

        ResIdlbl.setText("Reservation Id");

        RoomIdlbl.setText("Room Id");

        CustIdlbl.setText("Customer Id");

        comboRoomId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboRoomId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRoomIdActionPerformed(evt);
            }
        });

        comboCustId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        CheckInlbl.setText("CheckIn Date");

        CheckOutlbl.setText("CheckOut Date");

        Amountlbl.setText("Amount :");

        btnAddRooom.setText("+ Add Rooom");
        btnAddRooom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRooomActionPerformed(evt);
            }
        });

        btnBook.setBackground(new java.awt.Color(0, 0, 0));
        btnBook.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnBook.setForeground(new java.awt.Color(255, 255, 255));
        btnBook.setText("Confirm Reservation");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        RoomDetaillbl.setForeground(new java.awt.Color(51, 51, 255));
        RoomDetaillbl.setText("Room Detail........");

        btnRoomSearch.setText("Search");
        btnRoomSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRoomSearchActionPerformed(evt);
            }
        });

        PackageIdlbl.setText("Package Id");

        comboPackId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPackId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPackIdActionPerformed(evt);
            }
        });

        CustDetaillbl.setText("Customer Detail.......");

        PackDetaillbl.setForeground(new java.awt.Color(255, 51, 51));
        PackDetaillbl.setText("Package Detail.......");

        btnCustSearch.setText("Search");
        btnCustSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustSearchActionPerformed(evt);
            }
        });

        btnPackSearch.setText("Search");
        btnPackSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPackSearchActionPerformed(evt);
            }
        });

        reserStatuslbl.setText("Reserve Status");

        comboReserStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Confirmed", "Checked-In", "Checked-Out", "Canceled", "Completed", "No-Show", "On-Hold", "Arrived", "In-Progress" }));

        TotalAmountlbl.setText("Total Amount......");

        CheckInTimelbl.setText("CheckIn Time");

        CheckOutTimelbl.setText("CheckOut Time");

        btnReset.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(RoomIdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ResIdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CustIdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtResId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(comboCustId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboPackId, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(43, 43, 43)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnRoomSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnCustSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnPackSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(CheckOutlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(dateCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(CheckOutTimelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(txtCheckOutTime, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(Amountlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(36, 36, 36)
                                                .addComponent(TotalAmountlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(CustDetaillbl, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                            .addComponent(RoomDetaillbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(PackDetaillbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addComponent(PackageIdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(CheckInlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(CheckInTimelbl, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(27, 27, 27))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(reserStatuslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboReserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCheckInTime, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAddRooom, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 639, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(308, 308, 308))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(ResIdlbl)
                                        .addGap(46, 46, 46)
                                        .addComponent(RoomIdlbl))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtResId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(comboRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnRoomSearch)
                                            .addComponent(RoomDetaillbl))))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCustSearch)
                                    .addComponent(comboCustId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CustIdlbl)
                                    .addComponent(CustDetaillbl))
                                .addGap(39, 39, 39)
                                .addComponent(PackageIdlbl))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboPackId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnPackSearch)
                                .addComponent(PackDetaillbl)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(CheckInlbl))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CheckOutlbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(dateCheckOut, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(dateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCheckInTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckInTimelbl)
                    .addComponent(CheckOutTimelbl)
                    .addComponent(txtCheckOutTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserStatuslbl)
                    .addComponent(comboReserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Amountlbl)
                    .addComponent(TotalAmountlbl))
                .addGap(26, 26, 26)
                .addComponent(btnAddRooom)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnBook)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 913, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCustSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustSearchActionPerformed
        searchCustomer();
    }//GEN-LAST:event_btnCustSearchActionPerformed

    private void btnRoomSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRoomSearchActionPerformed
        searchRoom();
    }//GEN-LAST:event_btnRoomSearchActionPerformed

    private void btnPackSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPackSearchActionPerformed
        searchPackage();
    }//GEN-LAST:event_btnPackSearchActionPerformed

    private void btnAddRooomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRooomActionPerformed
        addtoTable();
    }//GEN-LAST:event_btnAddRooomActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clear();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        confirmReservation();
    }//GEN-LAST:event_btnBookActionPerformed

    private void comboRoomIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRoomIdActionPerformed

        getRoomAmount();
    }//GEN-LAST:event_comboRoomIdActionPerformed

    private void comboPackIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPackIdActionPerformed

        getPackageAmount();
    }//GEN-LAST:event_comboPackIdActionPerformed

    private void tblAddRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAddRoomMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblAddRoomMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ReservationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ReservationView().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Amountlbl;
    private javax.swing.JLabel CheckInTimelbl;
    private javax.swing.JLabel CheckInlbl;
    private javax.swing.JLabel CheckOutTimelbl;
    private javax.swing.JLabel CheckOutlbl;
    private javax.swing.JLabel CustDetaillbl;
    private javax.swing.JLabel CustIdlbl;
    private javax.swing.JLabel PackDetaillbl;
    private javax.swing.JLabel PackageIdlbl;
    private javax.swing.JLabel ResIdlbl;
    private javax.swing.JLabel RoomDetaillbl;
    private javax.swing.JLabel RoomIdlbl;
    private javax.swing.JLabel TotalAmountlbl;
    private javax.swing.JButton btnAddRooom;
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnCustSearch;
    private javax.swing.JButton btnPackSearch;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnRoomSearch;
    private javax.swing.JComboBox<String> comboCustId;
    private javax.swing.JComboBox<String> comboPackId;
    private javax.swing.JComboBox<String> comboReserStatus;
    private javax.swing.JComboBox<String> comboRoomId;
    private com.toedter.calendar.JDateChooser dateCheckIn;
    private com.toedter.calendar.JDateChooser dateCheckOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reserStatuslbl;
    private javax.swing.JTable tblAddRoom;
    private javax.swing.JTextField txtCheckInTime;
    private javax.swing.JTextField txtCheckOutTime;
    private javax.swing.JTextField txtResId;
    // End of variables declaration//GEN-END:variables

    // search Customer
    private void searchCustomer() {
        String custId = comboCustId.getSelectedItem().toString();
        try {
            CustomerDto customerDto = customerController.getCustomer(custId);
            if (customerDto != null) {
                CustDetaillbl.setText(customerDto.getCustomerId() + "   |   " + customerDto.getFirstName() + "   |   " + customerDto.getNic());
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // get CustomerIds
    private void getCustomerIds() {
        try {
            List< CustomerDto> customerDtos = customerController.getAllCustomer();

            // Clear existing items in the combo box
            comboCustId.removeAllItems();

            if (customerDtos != null && !customerDtos.isEmpty()) {
                for (CustomerDto customerDto : customerDtos) {
                    // Add the customer ID to the combo box only if status is true
                    if (customerDto.isStatus()) {
                        comboCustId.addItem(customerDto.getCustomerId());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // search Room
    private void searchRoom() {
        String roomId = comboRoomId.getSelectedItem().toString();
        try {
            RoomDto roomDto = roomController.getRoom(roomId);
            if (roomDto != null) {
                RoomDetaillbl.setText(roomDto.getRoomId() + "   |   " + roomDto.getCategoryId() + "   |   " + roomDto.getRoomNo() + "   |   " + roomDto.getPrice() + "   |   "
                        + roomDto.getAvailabilityStatus());
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // get RoomIds
    private void getRoomIds() {
        try {
            List< RoomDto> roomDtos = roomController.getAllRoom();

            // Clear existing items in the combo box
            comboRoomId.removeAllItems();

            if (roomDtos != null && !roomDtos.isEmpty()) {
                for (RoomDto roomDto : roomDtos) {
                    // Add the room ID to the combo box only if status is true
                    if (roomDto.isStatus() && "Available".equals(roomDto.getAvailabilityStatus())) {
                        comboRoomId.addItem(roomDto.getRoomId());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Room Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // search Package
    private void searchPackage() {
        String packId = comboPackId.getSelectedItem().toString();
        try {
            PackageDto packageDto = packageController.getPackage(packId);
            if (packageDto != null) {
                PackDetaillbl.setText(packageDto.getPackageId() + "   |   " + packageDto.getName() + "   |   " + packageDto.getPrice());
            } else {
                JOptionPane.showMessageDialog(this, "Package Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // get PackageIds
    private void getPackageIds() {
        try {
            List< PackageDto> packageDtos = packageController.getAllPackage();

            // Clear existing items in the combo box
            comboPackId.removeAllItems();

            if (packageDtos != null && !packageDtos.isEmpty()) {
                for (PackageDto packageDto : packageDtos) {
                    // Add the package ID to the combo box only if status is true
                    if (packageDto.isStatus()) {
                        comboPackId.addItem(packageDto.getPackageId());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Package Not Found");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // generate Auto ReserveID
    private void generateAutoReserveID() throws SQLException {
        try {
            Connection connection = DBConnection.getInstance().getConnection();

            // SQL query to retrieve the last ReserveID
            String query = "SELECT MAX(reservation_id) FROM reservations";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    // Get the last ReserveID from the result set
                    String lastReserveId = resultSet.getString(1);

                    // Generate the next ReserveID
                    String nextReserveId = generateNextReserveId(lastReserveId);

                    // Set the generated ReserveID to your text field 
                    txtResId.setText(nextReserveId);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to generate the next ReserveID based on the last ReserveID
    private String generateNextReserveId(String lastReserveId) {
        if (lastReserveId == null || lastReserveId.isEmpty()) {
            return "RS001";  // If no previous ReserveID
        }

        int numericPart = Integer.parseInt(lastReserveId.substring(2));
        numericPart++;

        return String.format("RS%03d", numericPart);
    }

    // Clear form
    private void clear() {

        try {
            txtResId.setText("");
            txtResId.setEditable(false);
            dateCheckIn.setDate(null);
            dateCheckOut.setDate(null);
            txtCheckInTime.setText("");
            txtCheckOutTime.setText("");
            TotalAmountlbl.setText("");
            RoomDetaillbl.setText("");
            CustDetaillbl.setText("");
            PackDetaillbl.setText("");
            comboRoomId.setSelectedItem(null);
            comboCustId.setSelectedItem(null);
            comboPackId.setSelectedItem(null);
            comboReserStatus.setSelectedItem(null);
            //tblAddRoom.clearSelection();
            generateAutoReserveID();
        } catch (SQLException ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // clear form Fields
    private void clearFields() {

        //txtResId.setText("");
        txtResId.setEditable(false);
        dateCheckIn.setDate(null);
        dateCheckOut.setDate(null);
        txtCheckInTime.setText("");
        txtCheckOutTime.setText("");
        TotalAmountlbl.setText("");
        RoomDetaillbl.setText("");
        CustDetaillbl.setText("");
        PackDetaillbl.setText("");
        //comboRoomId.setSelectedItem(null);
        //comboCustId.setSelectedItem(null);
        //comboPackId.setSelectedItem(null);
        //comboReserStatus.setSelectedItem(null);
        //tblAddRoom.clearSelection();
        //generateAutoReserveID();

    }

    // book reservation
//    private void confirmReservation() {
//        ReservationDto dto = new ReservationDto(
//                txtResId.getText(),
//                comboCustId.getSelectedItem().toString(),
//                true,
//                reservationDetailsDtos
//        );
//
//        try {
//            String resp = reservationController.confirmReservation(dto);
//            JOptionPane.showMessageDialog(this, resp);
//            generateAutoReserveID();
//            clearFields();
//            getRoomIds();
//            loadTable();
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.getMessage());
//            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    // book reservation
    private void confirmReservation() {
        try {
            // Retrieve values from the UI components
            String reservationId = txtResId.getText();
            String customerId = comboCustId.getSelectedItem().toString();

            // Validate if reservationId and customerId are not empty
            if (reservationId.isEmpty() || customerId.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all required fields.");
                return; // Exit the method if validation fails
            }

            // Create a ReservationDto
            ReservationDto dto = new ReservationDto(reservationId, customerId, true, reservationDetailsDtos);

            // Confirm the reservation using the controller
            String resp = reservationController.confirmReservation(dto);

            // Display the response message
            JOptionPane.showMessageDialog(this, resp);

            // Perform additional actions after successful confirmation
            generateAutoReserveID();
            clearFields();
            getRoomIds();
            loadTable();
        } catch (Exception ex) {
            // Handle exceptions
            JOptionPane.showMessageDialog(this, "Error confirming reservation: " + ex.getMessage());
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // cancel reservation
//    private void cancelReservation() {
//        // Get the reservation ID you want to cancel
//        String reservationId = txtResId.getText();
//
//        try {
//            // Call the cancelReservation method in the controller
//            String resp = reservationController.cancelReservation(reservationId);
//
//            JOptionPane.showMessageDialog(this, resp);
//            generateAutoReserveID();
//            clearFields();
//            getRoomIds();
//            loadTable();
//        } catch (Exception ex) {
//            // Handle exceptions appropriately
//            JOptionPane.showMessageDialog(this, ex.getMessage());
//            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//    }
    // add to Table
//    private void addtoTable() {
//
//        ReservationDetailsDto dto = new ReservationDetailsDto(
//                txtResId.getText(),
//                comboRoomId.getSelectedItem().toString(),
//                comboCustId.getSelectedItem().toString(),
//                comboPackId.getSelectedItem().toString(),
//                new Date(),
//                dateCheckIn.getDate(),
//                txtCheckInTime.getText(),
//                dateCheckOut.getDate(),
//                txtCheckOutTime.getText(),
//                comboReserStatus.getSelectedItem().toString(),
//                Double.parseDouble(TotalAmountlbl.getText()),
//                true // Assuming the default status is true
//        );
//
//        reservationDetailsDtos.add(dto);
//
//        Object[] rowData = {
//            dto.getReservationId(),
//            dto.getRoomId(),
//            dto.getCustomerId(),
//            dto.getPackageId(),
//            dto.getCheckInDate(),
//            dto.getCheckInTime(),
//            dto.getCheckOutDate(),
//            dto.getCheckOutTime(),
//            dto.getReserveStatus(),
//            dto.getAmount()
//        };
//
//        DefaultTableModel dtm = (DefaultTableModel) tblAddRoom.getModel();
//        dtm.addRow(rowData);
//        clearFields();
//    }
    // add to Table
    private void addtoTable() {
        try {
            // Validate all fields
            if (txtResId.getText().isEmpty()
                    || comboRoomId.getSelectedItem() == null
                    || comboCustId.getSelectedItem() == null
                    || comboPackId.getSelectedItem() == null
                    || dateCheckIn.getDate() == null
                    || txtCheckInTime.getText().isEmpty()
                    || dateCheckOut.getDate() == null
                    || txtCheckOutTime.getText().isEmpty()
                    || comboReserStatus.getSelectedItem() == null
                    || TotalAmountlbl.getText().isEmpty()) {

                // Display an error message if any field is empty
                JOptionPane.showMessageDialog(this, "Please fill in all fields.");
                return;  // Exit the method without adding to the table
            }

            // Retrieve values from the UI components
            String reservationId = txtResId.getText();
            String roomId = comboRoomId.getSelectedItem().toString();
            String customerId = comboCustId.getSelectedItem().toString();
            String packageId = comboPackId.getSelectedItem().toString();
            Date currentDate = new Date();  // Assuming you want the current date
            Date checkInDate = dateCheckIn.getDate();
            String checkInTime = txtCheckInTime.getText();
            Date checkOutDate = dateCheckOut.getDate();
            String checkOutTime = txtCheckOutTime.getText();
            String reserveStatus = comboReserStatus.getSelectedItem().toString();
            double totalAmount = Double.parseDouble(TotalAmountlbl.getText());

            // Create a ReservationDetailsDto
            ReservationDetailsDto dto = new ReservationDetailsDto(
                    reservationId,
                    roomId,
                    customerId,
                    packageId,
                    currentDate,
                    checkInDate,
                    checkInTime,
                    checkOutDate,
                    checkOutTime,
                    reserveStatus,
                    totalAmount,
                    true // Assuming the default status is true
            );

            // Add the dto to the reservationDetailsDtos list
            reservationDetailsDtos.add(dto);

            // Create an array of rowData
            Object[] rowData = {
                dto.getReservationId(),
                dto.getRoomId(),
                dto.getCustomerId(),
                dto.getPackageId(),
                dto.getCheckInDate(),
                dto.getCheckInTime(),
                dto.getCheckOutDate(),
                dto.getCheckOutTime(),
                dto.getReserveStatus(),
                dto.getAmount()
            };

            // Add rowData to the table model
            DefaultTableModel dtm = (DefaultTableModel) tblAddRoom.getModel();
            dtm.addRow(rowData);

            // Clear UI fields
            clearFields();
        } catch (NumberFormatException ex) {
            // Handle parsing errors for TotalAmountlbl
            JOptionPane.showMessageDialog(this, "Error parsing total amount: " + ex.getMessage());
        } catch (Exception ex) {
            // Handle other exceptions
            JOptionPane.showMessageDialog(this, "Error adding reservation to table: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    // get amount for room
    private void getRoomAmount() {

        try {
            // Get the selected roomId
            String selectedRoomId = (String) comboRoomId.getSelectedItem();

//            // Fetch the amount based on the selected roomId
//            roomAmount = fetchAmountForRoomId(selectedRoomId);
//
//            // Call the method to update the total amount
//            totalAmount();
            // Check if the selected roomId is not null before fetching the amount
            if (selectedRoomId != null) {
                // Fetch the amount based on the selected roomId
                roomAmount = fetchAmountForRoomId(selectedRoomId);

                // Call the method to update the total amount
                totalAmount();
            }
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Amount For RoomId
    public Double fetchAmountForRoomId(String roomId) throws Exception {
        ResultSet rst = CrudUtil.executeQuery("SELECT pricing FROM rooms WHERE room_id = ? AND status = true", roomId);
        if (rst.next()) {
            return rst.getDouble("pricing");
        }
        return null;
    }

    //get package Amount
    private void getPackageAmount() {

        try {
            // Get the selected PackageId
            String selectedPackageId = (String) comboPackId.getSelectedItem();

//            // Fetch the amount based on the selected PackageId
//            packageAmount = fetchAmountForPackageId(selectedPackageId);
//
//            // Call the method to update the total amount
//            totalAmount();
            // Check if the selected packageId is not null before fetching the amount
            if (selectedPackageId != null) {
                // Fetch the amount based on the selected packageId
                packageAmount = fetchAmountForPackageId(selectedPackageId);

                // Call the method to update the total amount
                totalAmount();
            }
        } catch (Exception ex) {
            Logger.getLogger(ReservationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Amount For PackageId
    public Double fetchAmountForPackageId(String packageId) throws Exception {
        ResultSet rst = CrudUtil.executeQuery("SELECT pricing FROM packages WHERE package_id = ? AND status = true", packageId);
        if (rst.next()) {
            return rst.getDouble("pricing");
        }
        return null;
    }

    // get total Amount
    private void totalAmount() {
        // Check if both roomAmount and packageAmount are not null
        if (roomAmount != null && packageAmount != null) {
            // Calculate the total amount
            double totalAmount = roomAmount + packageAmount;
            // Update the TotalAmountlbl
            TotalAmountlbl.setText(String.valueOf(totalAmount));
        }
    }

    //loadTable
    private void loadTable() {
        String columns[] = {"Reservation Code", "Room Code", "Customer Code", "Package Code", "CheckInDate", "CheckInTime", "CheckOutDate", "CheckOutTime", "ReserveStatus", "Amount"};
        DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        tblAddRoom.setModel(dtm);
    }

    // Method to set details in the view
//    private void setReservationDetails(ReservationDetailsDto detailsDto) {
//
//        if (detailsDto != null) {
//
//            String reservationId = detailsDto.getReservationId();
//            txtResId.setText(detailsDto.getReservationId());
//            System.out.println("ReservationId " + reservationId);
//
//            String roomID = detailsDto.getRoomId();
//            comboRoomId.setSelectedItem(detailsDto.getRoomId());
//            System.out.println("RoomID " + roomID);
//
//            String customerID = detailsDto.getCustomerId();
//            comboCustId.setSelectedItem(detailsDto.getCustomerId());
//            System.out.println("CustID " + customerID);
//
//            String packageID = detailsDto.getPackageId();
//            comboPackId.setSelectedItem(detailsDto.getPackageId());
//            System.out.println("PackID " + packageID);
//
//            dateCheckIn.setDate(detailsDto.getCheckInDate());
//
//            txtCheckInTime.setText(detailsDto.getCheckInTime());
//
//            dateCheckOut.setDate(detailsDto.getCheckOutDate());
//            txtCheckOutTime.setText(detailsDto.getCheckOutTime());
//            comboReserStatus.setSelectedItem(detailsDto.getReserveStatus());
//            TotalAmountlbl.setText(String.valueOf(detailsDto.getAmount()));
//        }
//    }
}
